{"version":3,"sources":["common/c1-SuperInputText/SuperInputText.module.css","common/c2-SuperButton/SuperButton.module.css","common/c3-SuperCheckbox/SuperCheckbox.module.css","common/c5-SuperSelect/SuperSelect.module.css","common/c4-SuperEditableSpan/SuperEditableSpan.module.css","components/loginization/Loginization.tsx","components/NotFound/NotFound.tsx","components/newPassword/NewPassword.tsx","components/passwordRecovery/PasswordRecovery.tsx","components/profile/Profile.tsx","components/registration/Registration.tsx","components/routing/Routing.tsx","common/c1-SuperInputText/SuperInputText.tsx","common/c2-SuperButton/SuperButton.tsx","common/c5-SuperSelect/SuperSelect.tsx","common/c3-SuperCheckbox/SuperCheckbox.tsx","common/c6-SuperRadio/SuperRadio.tsx","common/c4-SuperEditableSpan/SuperEditableSpan.tsx","components/test/TestComponent.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Loginization","NotFound","NewPassword","PasswordRecovery","Profile","Registration","PATH","Routing","path","render","SuperInputText","props","type","onChange","onChangeText","onKeyPress","onEnter","error","spanClassName","className","restProps","finalSpanClassName","s","finalInputClassName","errorInput","superInput","e","currentTarget","value","key","SuperButton","red","finalClassName","default","SuperSelect","options","onChangeOption","mappedOptions","map","m","i","id","style","select","SuperCheckbox","onChangeChecked","children","checkbox","SuperRadio","name","onChangeCallback","o","checked","SuperEditableSpan","autoFocus","onBlur","spanProps","useState","editMode","setEditMode","onDoubleClick","restSpanProps","superSpan","TestComponent","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9f25b144.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"superInput\":\"SuperInputText_superInput__2MNAu\",\"errorInput\":\"SuperInputText_errorInput__2ii5r\",\"error\":\"SuperInputText_error__1_pl1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"SuperButton_default__Ncch0\",\"red\":\"SuperButton_red__3plR2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"SuperCheckbox_checkbox__2D53o\",\"spanClassName\":\"SuperCheckbox_spanClassName__26F15\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"select\":\"SuperSelect_select__3g0sn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"superSpan\":\"SuperEditableSpan_superSpan__2-3cr\"};","import React from 'react';\r\n\r\nconst Loginization = () => {\r\n    return (\r\n        <div>\r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Loginization;","import React from 'react';\r\n\r\nconst NotFound = () => {\r\n    return (\r\n        <div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NotFound;","import React from 'react';\r\n\r\nconst NewPassword = () => {\r\n    return (\r\n        <div>\r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NewPassword;","import React from 'react';\r\n\r\nconst PasswordRecovery = () => {\r\n    return (\r\n        <div>\r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PasswordRecovery;","import React from 'react';\r\n\r\nconst Profile = () => {\r\n    return (\r\n        <div>\r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profile;","import React from 'react';\r\n\r\nconst Registration = () => {\r\n    return (\r\n        <div>\r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Registration;","import React from 'react';\r\nimport {Route, Switch} from \"react-router\";\r\nimport Loginization from '../loginization/Loginization';\r\nimport NotFound from \"../NotFound/NotFound\";\r\nimport NewPassword from \"../newPassword/NewPassword\";\r\nimport PasswordRecovery from \"../passwordRecovery/PasswordRecovery\";\r\nimport Profile from \"../profile/Profile\";\r\nimport Registration from \"../registration/Registration\";\r\n\r\nexport const PATH ={\r\n    LOGIN: '/login',\r\n    NOT_FOUND: '/404',\r\n    NEW_PASSWORD: '/new-password',\r\n    PASSWORD_RECOVERY: '/password-recovery',\r\n    PROFILE: '/profile',\r\n    REGISTRATION: '/registration',\r\n}\r\n\r\nconst Routing = () => {\r\n    return (\r\n        <>\r\n            <Switch>\r\n                <Route path={PATH.LOGIN} render={()=> <Loginization/>} />\r\n                <Route path={PATH.NOT_FOUND} render={()=> <NotFound/>} />\r\n                <Route path={PATH.NEW_PASSWORD} render={()=> <NewPassword/>} />\r\n                <Route path={PATH.PASSWORD_RECOVERY} render={()=> <PasswordRecovery/>} />\r\n                <Route path={PATH.PROFILE} render={()=> <Profile/>} />\r\n                <Route path={PATH.REGISTRATION} render={()=> <Registration/>} />\r\n            </Switch>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Routing;","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from 'react'\nimport s from './SuperInputText.module.css'\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\n\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\n    onChangeText?: (value: string) => void\n    onEnter?: () => void\n    error?: string\n    spanClassName?: string\n}\n\nconst SuperInputText: React.FC<SuperInputTextPropsType> = props => {\n\n    const {\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\n        onChange,\n        onChangeText,\n        onKeyPress,\n        onEnter,\n        error,\n        className,\n        spanClassName,\n        ...restProps// все остальные пропсы попадут в объект restProps\n    } = props\n\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n        onChange // если есть пропс onChange\n        && onChange(e) // то передать ему е (поскольку onChange не обязателен)\n\n        onChangeText && onChangeText(e.currentTarget.value)\n    }\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\n        onKeyPress && onKeyPress(e);\n\n        onEnter // если есть пропс onEnter\n        && e.key === 'Enter' // и если нажата кнопка Enter\n        && onEnter() // то вызвать его\n    }\n\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : ''}`\n    const finalInputClassName = `${props.error ? s.errorInput : s.superInput ? s.superInput : ''}` // need to fix with (?:) and s.superInput\n\n    return (\n        <>\n            <input\n                type={'text'}\n                onChange={onChangeCallback}\n                onKeyPress={onKeyPressCallback}\n                className={finalInputClassName}\n\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\n            />\n            {error && <span className={finalSpanClassName}>{error}</span>}\n        </>\n    )\n}\n\nexport default SuperInputText\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps, MouseEventHandler} from 'react'\nimport s from './SuperButton.module.css'\n\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\n\ntype SuperButtonPropsType = DefaultButtonPropsType & {\n    red?: boolean\n}\n\nconst SuperButton: React.FC<SuperButtonPropsType> = props => {\n\n    const {\n        red,\n        className,\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\n    } = props\n\n\n    const finalClassName = `${red ? s.red : s.default} ${className}`\n\n    return (\n        <button\n            className={finalClassName}\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\n        />\n    )\n}\n\nexport default SuperButton\n","import React, {ChangeEvent, DetailedHTMLProps, SelectHTMLAttributes} from 'react'\nimport style from \"./SuperSelect.module.css\"\n\ntype DefaultSelectPropsType = DetailedHTMLProps<SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>\n\ntype SuperSelectPropsType = DefaultSelectPropsType & {\n    options?: any[]\n    onChangeOption?: (option: any) => void\n}\n\nconst SuperSelect: React.FC<SuperSelectPropsType> = (\n    {\n        options,\n        onChange, onChangeOption,\n        ...restProps\n    }\n) => {\n    const mappedOptions: any[] = options ? options.map((m, i) => {\n        return <option id=\"sel\" key={m + '-' + i} value={m}> {m}</option>\n    }) : [];\n\n    const onChangeCallback = (e: ChangeEvent<HTMLSelectElement>) => {\n        onChange && onChange(e)\n        onChangeOption && onChangeOption(e.currentTarget.value)\n    }\n\n    return (\n        <div className={style.select}>\n            <select onChange={onChangeCallback} {...restProps}>\n                {mappedOptions}\n            </select>\n        </div>\n    )\n}\n\nexport default SuperSelect\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from 'react'\nimport s from './SuperCheckbox.module.css'\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\n\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\n    onChangeChecked?: (checked: boolean) => void\n    spanClassName?: string\n}\n\nconst SuperCheckbox: React.FC<SuperCheckboxPropsType> = props => {\n\n    const {\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\n        onChange,\n        onChangeChecked,\n        className,\n        spanClassName,\n        children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\n\n        ...restProps// все остальные пропсы попадут в объект restProps\n    } = props\n\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n        onChange && onChange(e)\n        onChangeChecked && onChangeChecked(e ? true : false)\n    }\n\n    const finalInputClassName = `${s.checkbox} ${className ? className : ''}`\n\n    return (\n        <label>\n            <input\n                type={'checkbox'}\n                onChange={onChangeCallback}\n                className={finalInputClassName}\n\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\n            />\n            {children && <span className={s.spanClassName}>{children}</span>}\n        </label> // благодаря label нажатие на спан передастся в инпут\n    )\n}\n\nexport default SuperCheckbox\n","import React, {ChangeEvent, InputHTMLAttributes, DetailedHTMLProps} from 'react'\n\ntype DefaultRadioPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\n\ntype SuperRadioPropsType = DefaultRadioPropsType & {\n    options?: any[]\n    onChangeOption?: (option: any) => void\n}\n\nconst SuperRadio: React.FC<SuperRadioPropsType> = (\n    {\n        type, name,\n        options, value,\n        onChange, onChangeOption,\n        ...restProps\n    }\n) => {\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n        onChange && onChange(e)\n        onChangeOption && onChangeOption(e.currentTarget.value)\n    }\n\n\n    const mappedOptions: any[] = options ? options.map((o, i) => (\n        <label key={name + '-' + i}>\n            <input\n                type={'radio'}\n                name={name}\n                checked={o === value}\n                value={o}\n                onChange={onChangeCallback}\n            />\n            {o}\n        </label>\n    )) : []\n\n    return (\n        <>\n            {mappedOptions}\n        </>\n    )\n}\n\nexport default SuperRadio\n","import React, {DetailedHTMLProps, InputHTMLAttributes, HTMLAttributes, useState} from 'react'\nimport SuperInputText from '../c1-SuperInputText/SuperInputText'\nimport style from './SuperEditableSpan.module.css'\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\n// тип пропсов обычного спана\ntype DefaultSpanPropsType = DetailedHTMLProps<HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>\n\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\ntype SuperEditableSpanType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\n    onChangeText?: (value: string) => void\n    onEnter?: () => void\n    error?: string\n    spanClassName?: string\n\n    spanProps?: DefaultSpanPropsType // пропсы для спана\n}\n\nconst SuperEditableSpan: React.FC<SuperEditableSpanType> = (\n    {\n        autoFocus, // игнорировать изменение этого пропса\n        onBlur,\n        onEnter,\n        spanProps,\n\n        ...restProps// все остальные пропсы попадут в объект restProps\n    }\n) => {\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const {children, onDoubleClick, className, ...restSpanProps} = spanProps || {}\n\n    const onEnterCallback = () => {\n        setEditMode(false) // выключить editMode при нажатии Enter\n\n        onEnter && onEnter()\n    }\n    const onBlurCallback = (e: React.FocusEvent<HTMLInputElement>) => {\n        setEditMode(false) // выключить editMode при нажатии за пределами инпута\n\n        onBlur && onBlur(e)\n    }\n    const onDoubleClickCallBack = (e: React.MouseEvent<HTMLSpanElement, MouseEvent>) => {\n        setEditMode(true) // включить editMode при двойном клике\n\n        onDoubleClick && onDoubleClick(e)\n    }\n\n    const spanClassName = `${style.superSpan}`\n\n    return (\n        <>\n            {editMode\n                ? (\n                    <SuperInputText\n                        autoFocus // пропсу с булевым значением не обязательно указывать true\n                        onBlur={onBlurCallback}\n                        onEnter={onEnterCallback}\n\n                        {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\n                    />\n                ) : (\n                    <span\n                        onDoubleClick={onDoubleClickCallBack}\n                        className={spanClassName}\n\n                        {...restSpanProps}\n                    >\n                        {/*если нет захардкодженного текста для спана, то значение инпута*/}\n                        {children || restProps.value}\n                    </span>\n                )\n            }\n        </>\n    )\n}\n\nexport default SuperEditableSpan\n","import SuperInputText from \"../../common/c1-SuperInputText/SuperInputText\";\r\nimport SuperButton from \"../../common/c2-SuperButton/SuperButton\";\r\nimport SuperSelect from \"../../common/c5-SuperSelect/SuperSelect\";\r\nimport SuperCheckbox from \"../../common/c3-SuperCheckbox/SuperCheckbox\";\r\nimport SuperRadio from \"../../common/c6-SuperRadio/SuperRadio\";\r\nimport SuperEditableSpan from \"../../common/c4-SuperEditableSpan/SuperEditableSpan\";\r\n\r\nconst TestComponent = () => {\r\n    return (\r\n        <div>\r\n            <SuperInputText/>\r\n            <SuperButton/>\r\n            <SuperSelect/>\r\n            <SuperCheckbox/>\r\n            <SuperRadio/>\r\n            <SuperEditableSpan/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TestComponent;","import React from 'react';\nimport './App.css';\nimport {HashRouter} from \"react-router-dom\";\nimport Routing from \"./components/routing/Routing\";\nimport TestComponent from \"./components/test/TestComponent\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n          <HashRouter>\n              <Routing/>\n              <TestComponent/>\n          </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}